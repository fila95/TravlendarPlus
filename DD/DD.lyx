#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename images/GitHub Banner.png
	lyxscale 30
	scale 15

\end_inset


\end_layout

\begin_layout Quote
\noindent
\align center

\size giant
Travlendar+
\end_layout

\begin_layout Quote
\noindent
\align center

\size larger
Design Document
\end_layout

\begin_layout Quote
\noindent
\align center
Calzavara Filippo, Filaferro Giovanni, Benedetto Maria Nespoli
\end_layout

\begin_layout Standard
\align center
Version 1.0.0
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename images/PolimiLogo.png
	width 3cm

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
Purpose
\end_layout

\begin_layout Standard
The Design Document (DD) contains a functional description of 
\begin_inset Quotes eld
\end_inset

Travlendar+
\begin_inset Quotes erd
\end_inset

's System.
 This document explains each component that will be inserted into the system,
 its architecture and the design patterns that will be implemented to ensure
 that all the requirements are satisfied.
 Components will be described both at High Level and more in depth, illustrating
 and explaining all the subcomponents every component is made of.
 The reader of this document will get a clear idea about its architecture
 (hardware and software) whether he wants to have a detailed description
 of the system or a more general one.
\end_layout

\begin_layout Subsection
Scope
\end_layout

\begin_layout Standard
The aim of this project is to create a smart calendar-based application
 that people can use to reduce delays at the appointments and supporting
 the users by identifying the best mobility option.
 People create appointments and they get notified in case they will not
 be on time for it.
 Moreover, the system needs to take into account weather forecast as well
 as strike days.
 Furthermore, the users should be able to adapt settings based on their
 preferences, such as walking-time constrains or a more eco-friendly way
 of transportation, and the possibility to define flexible appointments
 that given a window of time and a duration an arrangement of the schedule
 is proposed.
 Finally, the system should provide the user of a ticket or locate the closest
 car/bike sharing vehicle if it is the mean of transportation chosen.
\end_layout

\begin_layout Subsection
Definitions, Acronyms, Abbreviations
\end_layout

\begin_layout Subsubsection
Definitions
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Definition
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Explanation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Appointment
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A period of time in which something take place at a certain time
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Travlendar+
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The name of the platform to develop
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A synonym for appointment 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
System
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A synonym of Travlendar+
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Up Coming Event
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A particular event that is expected to occur soon
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Up Next Event
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A synonym of Up Coming
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
User
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A potential utilizer of this project
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ride
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A service performed by a ride-sharing company and Cabs
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mockup
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A scale or full-size model of a design or device
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RESTful API
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
API that follow the REST paradigm
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Direction API
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The name of Google Mapsâ„¢ API service
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Acronyms
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="14" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Acronym
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Explanation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GUI
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Graphic User Interface
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ETA
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Estimated time of arrival
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
API
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Application programming interface
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RASD
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Requirement Analysis and Specification Document
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PNR
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Passenger name record
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
QR
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Quick Response Code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operative System
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JSON
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JavaScript Object Notation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
REST
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Representational State Transfer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
APNS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Apple Push Notification Service
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CRUD
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Create, Read, Update, Delete
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ER
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Entity Relationship
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TDD
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Test Driven Development
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Abbreviations
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Abbreviation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Explanation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
App
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A synonym of Travlendar+
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[Gn]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
N-goal
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[Dn]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
N-domain assumption
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[Rn]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
N-functional requirement
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Revision History
\end_layout

\begin_layout Itemize
1.0.0 - Initial Version (13/11/2017) 
\end_layout

\begin_layout Subsection
Reference Documents
\end_layout

\begin_layout Itemize
RASD document previously delivered.
\end_layout

\begin_layout Subsection
Document Structure
\end_layout

\begin_layout Standard
The paper includes eight areas.
 The first one, is composed by the introductory information provided in
 order to give an orientative view of what this document is about.
 The second one provides an in-depth description of each Architectural Design
 aspect which reflects the decisions that the team made.
 The third section is about the algorithms that are designed to make the
 full system work.
 Then a 
\begin_inset Quotes eld
\end_inset

User Interface Design
\begin_inset Quotes erd
\end_inset

 section will go through the design decisions.
 Section five provides information about how the requirements defined in
 the RASD document map to the design elements defined in this document.
 The sixth section will identify the order in which the subcomponents of
 the system will be implemented and tested.
 Finally, a seventh and a eight section allows the reader to learn the effort
 spent on this project by each team member and the references made in the
 whole paper.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Architectural Design
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:General-tier"

\end_inset

 represents Travlendar+'s architecture, based on a three physical tiers
 system with distributed application and data.
 In order to maintain higher standard in terms of offline reliability, the
 client application is provided of a presentation level, application logic
 and data management that merely synchronizes and fetch updates from the
 server through a non-faulty connection.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/tier.png
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:General-tier"

\end_inset

General tier architecture for Travlendar+.
 An application logic and data management layer is provided to the client
 application for offline reliability
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Nevertheless, most of the computation burden such as the scheduling, is
 performed sever-side.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
The following subsections are presented as follows:
\end_layout

\begin_layout Enumerate
The first section, 
\emph on
High-level components overview and their interaction
\emph default
, contains details on how the communication works and how the server is
 structured
\end_layout

\begin_layout Enumerate
The second section describes the components of the application logic, including
 the external services called via API and the ER diagram
\end_layout

\begin_layout Enumerate
The 
\emph on
Deployment view
\emph default
 section contains more details regarding the physical tiers implementation
\end_layout

\begin_layout Enumerate
The 
\emph on
Runtime view 
\emph default
chapter includes more detailed sequence diagram of most important interaction
 with the system
\end_layout

\begin_layout Enumerate

\emph on
Component interfaces
\emph default
 section contains information regarding the interface to be built in order
 to make intelligible different system
\end_layout

\begin_layout Enumerate
Section 
\emph on
Selected architectural styles and patterns
\emph default
 contains the major settings of the implementation of the system 
\end_layout

\begin_layout Enumerate
Finally, a chapter named 
\emph on
Other design decisions
\emph default
 describes further decision detail taken into account during the developing
 of this document
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
High-level components overview and their interaction
\end_layout

\begin_layout Standard
The mobile application located on the client's phone connects to the central
 server by sending REST Api calls in asynchronous mode in a separated thread.
 The main server replies back with the information requested using the JSON
 encoding, which is reinterpreted locally by the application.
 An example of this interaction is reported on Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:General-architecture"

\end_inset

.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/application.png
	lyxscale 50
	scale 25

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:General-architecture"

\end_inset

General architecture
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The engineering team of this project has identified Herokuâ„¢ Cloud as the
 most suitable platform to host the main server due its performance and
 scalability features.
 As shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Central-Server-Representation"

\end_inset

, the main server is composed by two entities: the web server and the applicatio
n logic while the database stays on another machine (Distributed Architecture).
 The first is in charge of dealing with all HTTP/HTTPS API requests in a
 consistent and systematic way.
 It also communicates with the application logic, which is the second layer,
 also called Mobile App Services as it contains the logic to run the computation.
 Finally, the last layer is the database which stores the dataset making
 it available to the application logic.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/heroku.png
	lyxscale 50
	scale 22

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Central-Server-Representation"

\end_inset

Central Server relies on Heroku Cloud.
 Its representation includes two layers connected to each other, the database
 will be separated and filters requests through a firewall.
 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All the parts described before can be separated into more than one machines:
 replication and load balancing issues are transparent services provided
 by the Heroku platform.
\end_layout

\begin_layout Subsection
Component view
\end_layout

\begin_layout Standard
A high level component view and related interfaces are represented at Figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-main-component"

\end_inset

.
 The system is composed of a major component, namely the 
\emph on
Mobile Application
\emph default
, that interacts with two subsystems, 
\emph on
Scheduling Services
\emph default
 and 
\emph on
User Services
\emph default
.
 
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/component-1.png
	lyxscale 30
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-main-component"

\end_inset

The component view of the system
\end_layout

\end_inset


\end_layout

\end_inset

Each module that compose the subsystems is interfaced with the DataBase
 (specifically the DBMS) in order to let each part work independently and
 simultaneously.
\end_layout

\begin_layout Subsubsection
Component view of the Scheduling Services
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/component-2.png
	lyxscale 30
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The Scheduling Services: includes details on 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\emph on
Calendar Module
\emph default
 works as calendar manager and offers the methods to edit, add and remove
 calendar.
 It is its responsibility to check calendar constrains such as duplicates.
 The 
\emph on
Event Manager
\emph default
 module allows the creation and managing of the events and handles the reschedul
ing when necessary (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Event-Schedule-Algorithm"

\end_inset

 for more details).
 It also offers the interface that allows to fetch information about previous
 events.
 This module is connected to Google Maps API, Weather API provided by OpenWeathe
rMap and to Apple Push Notification Server, that handles the notification
 system towards the mobile application.
\end_layout

\begin_layout Subsubsection
Component view of the User Services
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/component-3.png
	lyxscale 30
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
User Services in detail
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
User services contains an 
\emph on
Account Manager Module
\emph default
 that handles the login/auto-login functions (cf.
 Section 3.2.1 RASD document).
 The 
\emph on
Tickets module
\emph default
 provides tools to check whether a specific mean of transportation allows
 the sms-purchasing and eventually generates the text message.
 Moreover, a 
\emph on
Setting Module
\emph default
 provides tools for settings managing such as the eco-friendly mode or the
 external services available.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsubsection
Entity relationship diagram
\end_layout

\begin_layout Standard
The following diagram provides a graphical representation of the Database
 Schema that will be adopted by the system
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hspace*{-2cm}
\end_layout

\end_inset


\begin_inset Graphics
	filename images/er.png
	lyxscale 75
	scale 35

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:ER-Diagram"

\end_inset

ER Diagram of the database
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Further clarification regarding the schema:
\end_layout

\begin_layout Itemize
The column 
\emph on
transports
\emph default
 of the table 
\emph on
events
\emph default
 is of type BIT(5) for simplicity.
 If the bit is 1, the corresponding mean of transportation is enabled for
 that event.
 From the leftmost to the rightmost bit, there are: Walking, Biking, Public
 Transport, Sharing Services and Car.
\end_layout

\begin_layout Itemize
The column 
\emph on
repetitions
\emph default
 of the table 
\emph on
events
\emph default
 is of type BIT(7) for simplicity.
 If the bit is 1, the event will repeat for the corresponding day of the
 week.
 The leftmost bit is for Monday, and the rightmost is for Sunday.
\end_layout

\begin_layout Itemize
The other BITs are BIT(1) meaning TRUE for 1 and FALSE for 0.
\end_layout

\begin_layout Itemize
The column 
\emph on
transport_mean
\emph default
 of the table 
\emph on
travels
\emph default
 is an ENUM('WALKING', 'BIKING', 'PUBLIC', 'SHARING', 'CAR')
\end_layout

\begin_layout Subsection
Deployment view
\end_layout

\begin_layout Standard
As stated before, the system is composed by a three tiers architecture over
 the Herouk infrastructure.
 The first tier is represented by the mobile application that works with
 an own replica of the database over 
\emph on
Relam
\emph default
 DBMS.
 The application logic connects to the web server (based on NodeJS) via
 HTTP requests, that is located on an Heroku Machine (second tier).
 Moreover, the application server located on the same machine is engaged
 to connect to the DataBase Server (third tier) that contains the remote
 DBMS (
\emph on
PostgreSQL
\emph default
),.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hspace*{-3.0cm}
\end_layout

\end_inset


\begin_inset Graphics
	filename images/deployment.png
	lyxscale 30
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Deployment view of the System
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Runtime view
\end_layout

\begin_layout Subsubsection
Create Calendar
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hspace*{-3.5cm}
\end_layout

\end_inset


\begin_inset Graphics
	filename images/CreateCalendar.png
	lyxscale 30
	scale 50

\end_inset


\end_layout

\begin_layout Subsubsection
Add event
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace*{-4cm}
\backslash
hspace*{-0.5cm}
\end_layout

\end_inset


\begin_inset Graphics
	filename images/AddStandardOrFlexibleEvent.png
	lyxscale 40
	scale 38
	rotateAngle 90

\end_inset


\end_layout

\begin_layout Subsubsection
Edit Preferences
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace*{-4cm}
\end_layout

\end_inset


\begin_inset Graphics
	filename images/EditPreferences.png
	lyxscale 40
	scale 38
	rotateAngle 90

\end_inset


\end_layout

\begin_layout Subsubsection
Buy Ticket through SMS
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace*{-4cm}
\backslash
hspace*{-2.0cm}
\end_layout

\end_inset


\begin_inset Graphics
	filename images/buyTicket.png
	lyxscale 40
	scale 48
	rotateAngle 90

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
Component interfaces
\end_layout

\begin_layout Standard
In this section are described the interfaces that the Clients and the Server
 will use in order to communicate
\end_layout

\begin_layout Subsubsection
RESTful API
\end_layout

\begin_layout Standard
Our tiers will be connected through a network that will use a JSON RESTful
 Application Programming Interface.
\end_layout

\begin_layout Standard
The API will lie on a Web server and will be called on a HTTP channel with
 a classic TLS encryption layer
\end_layout

\begin_layout Standard
All the methods will require an authentication, except for the login one.
 The exposed methods are:
\end_layout

\begin_layout Itemize

\series bold
/api/v1/login
\end_layout

\begin_deeper
\begin_layout Itemize
POST: Allow the user to get an authentication token.
 If the user is not present on the server database, he/she will be registered
\end_layout

\begin_deeper
\begin_layout Itemize
Parameters: 
\series bold
user_token
\series default
 A user token that is generated client side by the application
\end_layout

\begin_layout Itemize
Return: 
\series bold
device_token
\series default
 A token that will be used for future authentication on that device with
 other APIs
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize

\series bold
/api/v1/pushNotification
\end_layout

\begin_deeper
\begin_layout Itemize
POST: Update the current push notification
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
/api/v1/settings
\end_layout

\begin_deeper
\begin_layout Itemize
GET: Retrieve the user settings
\end_layout

\begin_layout Itemize
POST: Save some settings
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
/api/v1/calendars/
\end_layout

\begin_deeper
\begin_layout Itemize
GET: Retrieve the user calendars
\end_layout

\begin_layout Itemize
POST: Save some calendars
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
/api/v1/calendar/{calendar_id}/events
\end_layout

\begin_deeper
\begin_layout Itemize
GET: Retrieve the user events
\end_layout

\begin_layout Itemize
POST: Save some events
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
/api/v1/schedule
\end_layout

\begin_deeper
\begin_layout Itemize
GET: Retrieve the user schedule
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
/api/v1/position
\end_layout

\begin_deeper
\begin_layout Itemize
POST: Update the current user position
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
/api/v1/nearestSharingMeans
\end_layout

\begin_deeper
\begin_layout Itemize
GET: Retrieve a list of sharing means near a specified coordinate
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
/api/v1/companies
\end_layout

\begin_deeper
\begin_layout Itemize
GET: Retrieve a list of available companies
\end_layout

\end_deeper
\begin_layout Subsection
Selected architectural styles and patterns
\end_layout

\begin_layout Subsubsection
Overall Architecture
\end_layout

\begin_layout Standard
Our system will be composed of two tiers:
\end_layout

\begin_layout Enumerate
A client executable, that will run on an iOS device
\end_layout

\begin_layout Enumerate
A server part, that will be served on a scalable Heroku instance
\end_layout

\begin_layout Standard
Each part will need a database: the server will store any piece of information
 about users, calendars and events on its database, while the client's database
 will have a cached copy of some events and calendars.
\end_layout

\begin_layout Subsubsection
Data Definition Language
\end_layout

\begin_layout Standard
The following DDL in a SQL-like language is proposed for the database
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace*{-2cm}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/DDL1.png
	lyxscale 10
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/DDL2.png
	lyxscale 10
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
DDL
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Design Pattern
\end_layout

\begin_layout Itemize

\series bold
Client-Server
\series default
: This is the most useful and common pattern, that allow us to process the
 data acquisition and elaboration separately from the client logic.
 Moreover, using this pattern we can create simpler clients, and make the
 system more scalable: in fact, in order to scale the entire system, we
 can simply add more server, and keep the client the same.
\end_layout

\begin_layout Itemize

\series bold
Singleton
\series default
: Server-side the server app will be a Singleton, while client side there
 will be a API Manager as Singleton
\end_layout

\begin_layout Itemize

\series bold
Publish/Subscribe
\series default
: Used for the push notifications between the clients and the server
\end_layout

\begin_layout Itemize

\series bold
Facade
\series default
: Used in the nearest sharing means API, that allows the clients to worry
 less about the differents requests that has to be made
\end_layout

\begin_layout Subsection
Other design decisions
\end_layout

\begin_layout Standard
We'll also use an external map service and a Weather API service, in order
 to find the best travel route, and to show to the user the events in a
 map view according to the weather forecast.
 To achieve this aim, we'll use the Google Maps Directions API and OpenWeatherMa
p.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Algorithm Design
\end_layout

\begin_layout Standard
In this section will be presented a description and an example code of the
 main algorithms for the Travlendar+ platform.
\end_layout

\begin_layout Standard
Code provided in these subsections will be written in C++ or pseudo-code
 that uses its syntax in order to better understand it without making the
 reading too complex.
\end_layout

\begin_layout Standard
Functions that will be called and not specified in each Subsection can be
 found in Subsection 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Other-Functions"

\end_inset

.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Event-Schedule-Algorithm"

\end_inset

Event Schedule Algorithm
\end_layout

\begin_layout Subsubsection
Description
\end_layout

\begin_layout Standard
This algorithm is the one who takes all users's events and tries to schedule
 them whether possible according to user preferences and distance from places.
 This will run Server Side.
\end_layout

\begin_layout Standard
Such function prepares a schedule following these steps:
\end_layout

\begin_layout Enumerate
Builds an array of events for each calendar of the given user;
\end_layout

\begin_layout Enumerate
Filters those events and divided them in two arrays of fixed and flexible
 events as described in Subsection 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Flexible-Event-Fitting-Order-Algorythm"

\end_inset

;
\end_layout

\begin_layout Enumerate
It tries to fit them in the schedule:
\end_layout

\begin_deeper
\begin_layout Enumerate
If it succeeds (they are fittable and reachable) it adds them to the fixed
 array and considers them as fixed;
\end_layout

\begin_layout Enumerate
If it fails, it sends a notification to the user;
\end_layout

\end_deeper
\begin_layout Enumerate
Then it tries to check if the other fixed events are reachable using the
 reachability function described in Subsection 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Reachability-Function"

\end_inset

;
\end_layout

\begin_layout Enumerate
It terminates returning the created schedule.
\end_layout

\begin_layout Paragraph
Main Function:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++},basicstyle={\small\rmfamily},breaklines=true"
inline false
status open

\begin_layout Plain Layout

Schedule* schedule(
\end_layout

\begin_layout Plain Layout

	User *u, 
\end_layout

\begin_layout Plain Layout

	unsigned long date1, 
\end_layout

\begin_layout Plain Layout

	unsigned long date2
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is the main one that takes in:
\end_layout

\begin_layout Itemize

\series bold
u
\series default
: user reference;
\end_layout

\begin_layout Itemize

\series bold
date1
\series default
: start date;
\end_layout

\begin_layout Itemize

\series bold
date2
\series default
: ending date.
\end_layout

\begin_layout Paragraph
Overloaded Functions:
\end_layout

\begin_layout Subparagraph
Overload 1:
\end_layout

\begin_layout Standard
Schedule function that checks just the 12 hours before and after the event
 as parameter that has been created, modified or deleted.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++},basicstyle={\small\rmfamily},breaklines=true"
inline false
status open

\begin_layout Plain Layout

Schedule* schedule(
\end_layout

\begin_layout Plain Layout

	User *u,
\end_layout

\begin_layout Plain Layout

	Event *e
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is the first one overloaded that takes in:
\end_layout

\begin_layout Itemize

\series bold
u
\series default
: user reference;
\end_layout

\begin_layout Itemize

\series bold
e
\series default
: event needing reschedule;
\end_layout

\begin_layout Subparagraph
Overload 2:
\end_layout

\begin_layout Standard
Schedule function that checks the next hours, this can be called when user
 uploads his current position or the system calls it every 2 hours;
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++},basicstyle={\small\rmfamily},breaklines=true"
inline false
status open

\begin_layout Plain Layout

Schedule* schedule(User *u);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is the first one overloaded that takes in:
\end_layout

\begin_layout Itemize

\series bold
u
\series default
: user reference;
\end_layout

\begin_layout Subsubsection
Example of Implementation
\end_layout

\begin_layout Standard
Overloads:
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/code/s_overload.png
	lyxscale 20
	scale 40

\end_inset


\end_layout

\begin_layout Standard
Main Function:
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/code/s__1.jpg
	lyxscale 20
	scale 60

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/code/s__2.jpg
	lyxscale 20
	scale 60

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/code/s__3.jpg
	lyxscale 20
	scale 60

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/code/s__4.jpg
	lyxscale 20
	scale 60

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Flexible-Event-Fitting-Order-Algorythm"

\end_inset

Flexible Event Fitting Order Algorithm
\end_layout

\begin_layout Subsubsection
Description
\end_layout

\begin_layout Standard
This is the algorithm that will be triggered when section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Event-Schedule-Algorithm"

\end_inset

's functions calls:
\begin_inset listings
lstparams "language={C++},basicstyle={\small\rmfamily},breaklines=true"
inline false
status open

\begin_layout Plain Layout

void filterEvents(
\end_layout

\begin_layout Plain Layout

	vector<Event> *main,
\end_layout

\begin_layout Plain Layout

	vector<Event> *fixed,
\end_layout

\begin_layout Plain Layout

	vector<Event> *flexible
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Such function will do the following:
\end_layout

\begin_layout Enumerate
Put fixed events contained in 
\series bold
main
\series default
 to 
\series bold
fixed
\series default
 vector and sort them by happening date;
\end_layout

\begin_layout Enumerate
Put flexible events contained in 
\series bold
main
\series default
 to 
\series bold
flexible
\series default
 vector;
\end_layout

\begin_layout Enumerate
Sort 
\series bold
flexible
\series default
 vector using the fitness function described above.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Formula 
\[
fittability(e)=1-\frac{duration(e)}{end(e)-start(e)-occupiedRange(c)}
\]

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Fittability-Function"

\end_inset

Fittability Function
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This mathematical function takes into:
\end_layout

\begin_layout Itemize

\series bold
duration
\series default
(e): the duration of the flexible event;
\end_layout

\begin_layout Itemize

\series bold
end
\series default
(e): preferred end time interval of flexible event;
\end_layout

\begin_layout Itemize

\series bold
start
\series default
(e): preferred start time interval of flexible event;
\end_layout

\begin_layout Itemize

\series bold
occupiedRange
\series default
(c): number of hours already occupied in that range by other events in the
 event's calendar.
\end_layout

\begin_layout Subsubsection
Example of Implementation
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/code/fitting.png
	lyxscale 20
	scale 60

\end_inset


\end_layout

\begin_layout Standard
This piece of code uses also this utility function in order to get the fitness
 value of an event:
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/code/fitness.png
	lyxscale 20
	scale 60

\end_inset


\end_layout

\begin_layout Standard
And another utility that returns occupied time by other events in a calendar
 prototyped above:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++},basicstyle={\small\rmfamily},breaklines=true"
inline false
status open

\begin_layout Plain Layout

double occupiedTime(Calendar *c, Event *e);
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Reachability-Function"

\end_inset

Reachability Function Algorithm
\end_layout

\begin_layout Standard
This algorithm is the one which takes an event and verifies if it is reachable
 from another event or from a specified position.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++},basicstyle={\small\rmfamily},breaklines=true"
inline false
status open

\begin_layout Plain Layout

bool eventIsReachable(Event *e1, Event *e2);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++},basicstyle={\small\rmfamily},breaklines=true"
inline false
status open

\begin_layout Plain Layout

bool eventIsReachable(Coordinates coords, Event *e);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In order to check reachability this function does:
\end_layout

\begin_layout Enumerate
Takes user preferences taking into account maximum walk distance, maximum
 distance by bike, public transport timings;
\end_layout

\begin_layout Enumerate
Retrieves weather data about the target event place;
\end_layout

\begin_layout Enumerate
Queries Google Directions API (Which already takes into account strike informati
on and traffic problems) to find the best routes paying also attention to
 the target event's preferred travel means (according to weather data);
 
\end_layout

\begin_deeper
\begin_layout Enumerate
If the time to get to the place is compatible with the start of the event
 then it is reachable and so routes fields and suggested start/end time
 will be populated;
\end_layout

\begin_layout Enumerate
Otherwise it fails quits and returns false;
\end_layout

\end_deeper
\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Other-Functions"

\end_inset

Other Used Functions, Algorithms and Data Structures
\end_layout

\begin_layout Standard
In this section can be found utility functions used by the main algorithms
 to simplify the development.
\end_layout

\begin_layout Standard
Images include function prototypes well commented so that they can be self-expla
natory.
\end_layout

\begin_layout Subsubsection
Data Structures
\end_layout

\begin_layout Standard
\align left
\begin_inset Graphics
	filename images/code/u_d_1.png
	lyxscale 20
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\align left
\begin_inset Graphics
	filename images/code/u_d_2.png
	lyxscale 20
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\align left
\begin_inset Graphics
	filename images/code/u_d_3.png
	lyxscale 20
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\align left
\begin_inset Graphics
	filename images/code/u_d_4.png
	lyxscale 20
	scale 50

\end_inset


\end_layout

\begin_layout Subsubsection
Utility Functions
\end_layout

\begin_layout Standard
\align left
\begin_inset Graphics
	filename images/code/u_f_1.png
	lyxscale 20
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\align left
\begin_inset Graphics
	filename images/code/u_f_2.png
	lyxscale 20
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\align left
\begin_inset Graphics
	filename images/code/u_f_3.png
	lyxscale 20
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\align left
\begin_inset Graphics
	filename images/code/u_f_4.png
	lyxscale 20
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\align left
\begin_inset Graphics
	filename images/code/u_f_5.png
	lyxscale 20
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\align left
\begin_inset Graphics
	filename images/code/u_f_6.png
	lyxscale 20
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\align left
\begin_inset Graphics
	filename images/code/u_f_7.png
	lyxscale 20
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\align left
\begin_inset Graphics
	filename images/code/u_f_8.png
	lyxscale 20
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
User Interface Design
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename ../RASD/images/Wireframe/2-HomeScr_wired@3x.png
	lyxscale 10
	scale 13

\end_inset


\begin_inset space \enskip{}
\end_inset


\begin_inset Graphics
	filename ../RASD/images/Wireframe/13-MapExpan_wired@3x.png
	lyxscale 10
	scale 13

\end_inset


\end_layout

\begin_layout Standard
User Interface Design is very important to get a clear idea on how the final
 result of the application will appear to people.
\end_layout

\begin_layout Standard
This translated into creating Mockups of the application which can be found
 at chapter 3.1.1 
\begin_inset Quotes eld
\end_inset

User Interfaces
\begin_inset Quotes erd
\end_inset

 of the RASD document previously delivered.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Requirements Traceability
\end_layout

\begin_layout Standard
The choices presented in this document have the aim to achieve the goals
 described on the 
\emph on
Requirements Analysis and Specification Document
\emph default
.
 Follow a list of goals with each component and 
\end_layout

\begin_layout Itemize
[G0] Allow people to use the app without a login function 
\end_layout

\begin_deeper
\begin_layout Itemize
[R1] User Services: Account Manager Module through the 
\emph on
Auto-login Service
\emph default
 interface
\end_layout

\end_deeper
\begin_layout Itemize
[G1] Allow people to view the daily schedule with coming up events at the
 top
\end_layout

\begin_deeper
\begin_layout Itemize
[R2][R4][R5] Scheduling Services: Event Manager Module through 
\emph on
EventHistory
\emph default
 interface
\end_layout

\begin_layout Itemize
[R3] Scheduling Services: Event Manager Module through 
\emph on
ActivitiesScheduler
\emph default
 interface
\end_layout

\end_deeper
\begin_layout Itemize
[G2] Allow people to view previous events
\end_layout

\begin_deeper
\begin_layout Itemize
[R6] Scheduling Services: Calendar Module through 
\emph on
ManageCalendars
\emph default
 interface
\end_layout

\begin_layout Itemize
[R7] Scheduling Services: Event Manager Module through 
\emph on
EventHistory
\emph default
 interface
\end_layout

\begin_layout Itemize
[R8] Scheduling Services: Event Manager Module through 
\emph on
ManageEvents
\emph default
 interface
\end_layout

\end_deeper
\begin_layout Itemize
[G3] Allow people to view the detail of each event
\end_layout

\begin_deeper
\begin_layout Itemize
[R9][R11] Scheduling Services: Event Manager Module through 
\emph on
EventHistory
\emph default
 interface
\end_layout

\begin_layout Itemize
[R10][R12][R13] User Services: Tickets Module through 
\emph on
TicketsManaging
\emph default
 interface
\end_layout

\begin_layout Itemize
[R9][R14] Scheduling Services: Event Manager Module through 
\emph on
ActivitiesScheduler
\emph default
 interface
\end_layout

\end_deeper
\begin_layout Itemize
[G4] Allow the users to create an event
\end_layout

\begin_deeper
\begin_layout Itemize
[R15][R16][R17][R18][R19][R20] Scheduling Services: Event Manager Module
 through 
\emph on
ManageEvents
\emph default
 interface
\end_layout

\end_deeper
\begin_layout Itemize
[G5] Allow people to see daily events on a map
\end_layout

\begin_deeper
\begin_layout Itemize
[R21] Scheduling Services: Event Manager Module through 
\emph on
EventHistory
\emph default
 interface
\end_layout

\begin_layout Itemize
[R22] Scheduling Services: Event Manager Module through 
\emph on
ActivitiesScheduler
\emph default
 interface
\end_layout

\end_deeper
\begin_layout Itemize
[G6] Allow the user to set preferences
\end_layout

\begin_deeper
\begin_layout Itemize
[R22][R23][R24][R26] User Services: Setting Module through 
\emph on
ManageSetting
\emph default
 interface
\end_layout

\begin_layout Itemize
[R25] Scheduling Services: Calendar Module through 
\emph on
ManageCalendars
\emph default
 interface
\end_layout

\end_deeper
\begin_layout Itemize
[G7] Allow the users to create calendars
\end_layout

\begin_deeper
\begin_layout Itemize
[R27][R28] Scheduling Services: Calendar Module through 
\emph on
ManageCalendars
\emph default
 interface
\end_layout

\end_deeper
\begin_layout Itemize
[G8] Notify the user that it's time to leave for the appointment
\end_layout

\begin_deeper
\begin_layout Itemize
[R29][R30] Scheduling Services: Event Manager Module through 
\emph on
ActivitiesScheduler
\emph default
 interface
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Implementation, Integration and Test Plan
\end_layout

\begin_layout Standard
In this section it is described which it would be the most useful way to
 proceed with the implementation.
 It is assumed that the database has already been created according to the
 previously specified ER diagram in the Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:ER-Diagram"

\end_inset

, and it's up and running on a PostgreSQL instance.
 The Client and the Server part will be elaborated in the same time, starting
 from the Scheduling Services.
\end_layout

\begin_layout Subsection
Scheduling Services
\end_layout

\begin_layout Standard
The first subcomponent that should be implemented is the EventManager Module,
 since this subcomponent is the most complex of our system, and to prevent
 any bugs from appearing at the end of the project, causing problems and
 propagating them in other parts of the application.
 It is composed of a simple CRUD API and of a scheduler.
 The scheduler main algorithm is described in the Sub Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Event-Schedule-Algorithm"

\end_inset

.
\end_layout

\begin_layout Standard
The other subcomponent is the Calendar Module, that could be developed apart
 from the EventManager, since it is simple and there is no need of a complex
 logic.
\end_layout

\begin_layout Subsection
User Services
\end_layout

\begin_layout Standard
The Account Manager Module is one of the first used in the flow of a typical
 connection made by the client application, so it should be implemented
 at the beginning.
 Since it is not related to the EventManager Module, it can be developed
 in parallel.
\end_layout

\begin_layout Standard
The Settings Module is a CRUD API, and it can be developed right after the
 Account Manager Module.
\end_layout

\begin_layout Standard
The Tickets Module is one of the last subcomponents that should be implemented,
 since it's an enhancement of the application, and not strictly needed to
 make the system work as intended.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
Testing
\end_layout

\begin_layout Standard
The testing will be performed with the paradigm of the Test Driven Development,
 in which a test is written at the beginning of the development, and after
 that it is implemented the code that succeed in satisfying that test.
 The TDD is described in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Test-Driven-Development"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/tdd.png
	lyxscale 35
	scale 35

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Test-Driven-Development"

\end_inset

Test Driven Development Flow Chart
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
On the Server Side the test will be performed with the framework 
\series bold
mocha
\series default
, while on the Client they will be written using the 
\series bold
Swift Unit Test
\series default
.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Effort Spent
\end_layout

\begin_layout Itemize
Filippo Calzavara: 30.30h
\end_layout

\begin_layout Itemize
Giovanni Filaferro: 30.30h
\end_layout

\begin_layout Itemize
Benedetto Maria Nespoli: 30.30h
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
References
\end_layout

\begin_layout Itemize
RASD document previously delivered.
\end_layout

\begin_layout Subsection
Tools used
\end_layout

\begin_layout Standard
The tools used to developed this document are:
\end_layout

\begin_layout Itemize
GitHub: to versioning this document
\end_layout

\begin_layout Itemize
Source Tree: for a better use of Git Hub
\end_layout

\begin_layout Itemize
draw.io: to make all the schemas shown in this document
\end_layout

\begin_layout Itemize
LyX: to make this LaTeX document
\end_layout

\end_body
\end_document
